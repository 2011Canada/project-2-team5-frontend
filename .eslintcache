[{"C:\\Users\\User\\Jobs\\Revature\\Training\\Projects\\project-2\\project-2-team5-frontend\\src\\index.js":"1","C:\\Users\\User\\Jobs\\Revature\\Training\\Projects\\project-2\\project-2-team5-frontend\\src\\reducers\\index.js":"2","C:\\Users\\User\\Jobs\\Revature\\Training\\Projects\\project-2\\project-2-team5-frontend\\src\\App.js":"3","C:\\Users\\User\\Jobs\\Revature\\Training\\Projects\\project-2\\project-2-team5-frontend\\src\\reducers\\authReducer.js":"4","C:\\Users\\User\\Jobs\\Revature\\Training\\Projects\\project-2\\project-2-team5-frontend\\src\\reducers\\errorMessageReducer.js":"5","C:\\Users\\User\\Jobs\\Revature\\Training\\Projects\\project-2\\project-2-team5-frontend\\src\\components\\Signup.js":"6","C:\\Users\\User\\Jobs\\Revature\\Training\\Projects\\project-2\\project-2-team5-frontend\\src\\components\\Login.js":"7","C:\\Users\\User\\Jobs\\Revature\\Training\\Projects\\project-2\\project-2-team5-frontend\\src\\components\\LocationDrawer.js":"8","C:\\Users\\User\\Jobs\\Revature\\Training\\Projects\\project-2\\project-2-team5-frontend\\src\\components\\require_auth.js":"9","C:\\Users\\User\\Jobs\\Revature\\Training\\Projects\\project-2\\project-2-team5-frontend\\src\\components\\Dash.js":"10","C:\\Users\\User\\Jobs\\Revature\\Training\\Projects\\project-2\\project-2-team5-frontend\\src\\components\\Header.js":"11","C:\\Users\\User\\Jobs\\Revature\\Training\\Projects\\project-2\\project-2-team5-frontend\\src\\components\\Map\\Map.js":"12","C:\\Users\\User\\Jobs\\Revature\\Training\\Projects\\project-2\\project-2-team5-frontend\\src\\utils\\uri-fuctions.js":"13","C:\\Users\\User\\Jobs\\Revature\\Training\\Projects\\project-2\\project-2-team5-frontend\\src\\actions\\types.js":"14","C:\\Users\\User\\Jobs\\Revature\\Training\\Projects\\project-2\\project-2-team5-frontend\\src\\actions\\index.js":"15","C:\\Users\\User\\Jobs\\Revature\\Training\\Projects\\project-2\\project-2-team5-frontend\\src\\actions\\login.js":"16","C:\\Users\\User\\Jobs\\Revature\\Training\\Projects\\project-2\\project-2-team5-frontend\\src\\utils\\remote.js":"17"},{"size":1587,"mtime":1610037244699,"results":"18","hashOfConfig":"19"},{"size":252,"mtime":1610037244708,"results":"20","hashOfConfig":"19"},{"size":2428,"mtime":1610470072154,"results":"21","hashOfConfig":"19"},{"size":281,"mtime":1610037244702,"results":"22","hashOfConfig":"19"},{"size":292,"mtime":1610037244703,"results":"23","hashOfConfig":"19"},{"size":6518,"mtime":1610470072163,"results":"24","hashOfConfig":"19"},{"size":5640,"mtime":1610393625356,"results":"25","hashOfConfig":"19"},{"size":11783,"mtime":1610470072157,"results":"26","hashOfConfig":"19"},{"size":577,"mtime":1610037244698,"results":"27","hashOfConfig":"19"},{"size":473,"mtime":1610037244695,"results":"28","hashOfConfig":"19"},{"size":1948,"mtime":1610393625350,"results":"29","hashOfConfig":"19"},{"size":1009,"mtime":1610393625358,"results":"30","hashOfConfig":"19"},{"size":1454,"mtime":1610470072165,"results":"31","hashOfConfig":"19"},{"size":102,"mtime":1610037244693,"results":"32","hashOfConfig":"19"},{"size":54,"mtime":1610037244691,"results":"33","hashOfConfig":"19"},{"size":1199,"mtime":1610393625339,"results":"34","hashOfConfig":"19"},{"size":381,"mtime":1610037244712,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"u4myi",{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"48"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\User\\Jobs\\Revature\\Training\\Projects\\project-2\\project-2-team5-frontend\\src\\index.js",[],"C:\\Users\\User\\Jobs\\Revature\\Training\\Projects\\project-2\\project-2-team5-frontend\\src\\reducers\\index.js",[],"C:\\Users\\User\\Jobs\\Revature\\Training\\Projects\\project-2\\project-2-team5-frontend\\src\\App.js",["72","73","74"],"C:\\Users\\User\\Jobs\\Revature\\Training\\Projects\\project-2\\project-2-team5-frontend\\src\\reducers\\authReducer.js",[],"C:\\Users\\User\\Jobs\\Revature\\Training\\Projects\\project-2\\project-2-team5-frontend\\src\\reducers\\errorMessageReducer.js",[],"C:\\Users\\User\\Jobs\\Revature\\Training\\Projects\\project-2\\project-2-team5-frontend\\src\\components\\Signup.js",[],["75","76"],"C:\\Users\\User\\Jobs\\Revature\\Training\\Projects\\project-2\\project-2-team5-frontend\\src\\components\\Login.js",[],"C:\\Users\\User\\Jobs\\Revature\\Training\\Projects\\project-2\\project-2-team5-frontend\\src\\components\\LocationDrawer.js",["77","78","79"],"import React, { useEffect } from 'react';\r\nimport clsx from 'clsx';\r\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport Button from '@material-ui/core/Button';\r\nimport List from '@material-ui/core/List';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport FlightTakeoffIcon from '@material-ui/icons/FlightTakeoff';\r\nimport CameraIcon from '@material-ui/icons/Camera';\r\nimport PeopleIcon from '@material-ui/icons/People';\r\nimport { useSelector } from 'react-redux';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\n\r\nimport {GetAllUsersInCity, GetNextLocation, HandleHackRequest} from '../utils/uri-fuctions.js';\r\n\r\nconst useStyles = makeStyles({\r\n  list: {\r\n    width: '33vw',\r\n    minWidth: '500px',\r\n    marginLeft: 'auto',\r\n    marginRight: 'auto'\r\n  },\r\n  fullList: {\r\n    width: 'auto',\r\n  },\r\n  table: {\r\n    marginLeft: 'auto',\r\n    marginRight: 'auto',\r\n  },\r\n  backButton: {\r\n    backgroundColor: 'white',\r\n    flexFlow: 1,\r\n    marginTop: '20px',\r\n    marginBottom: '20px',\r\n    marginLeft: '80%',\r\n    marginRight: '10px',\r\n  }\r\n});\r\n\r\nconst StyledTableCell = withStyles((theme) => ({\r\n  head: {\r\n    backgroundColor: theme.palette.common.black,\r\n    color: theme.palette.common.white,\r\n  },\r\n  body: {\r\n    fontSize: 14,\r\n  },\r\n}))(TableCell);\r\n\r\nconst StyledTableRow = withStyles((theme) => ({\r\n  root: {\r\n    '&:nth-of-type(odd)': {\r\n      backgroundColor: theme.palette.action.hover,\r\n    },\r\n  },\r\n}))(TableRow);\r\n\r\nfunction createData(name, knownAliases) {\r\n  return { name, knownAliases };\r\n}\r\n\r\nconst LocationDrawer = (props) => {\r\n  const classes = useStyles();\r\n\r\n  const user = useSelector((state) => state.authenticated);             //this is the user information (redux)\r\n\r\n  const [state, setState] = React.useState({left: false});              //this is the drawer state\r\n  const [currentView, setCurrentView] = React.useState('main');         //this is the page state within the drawer\r\n\r\n  const [openDialog, setDialogOpen] = React.useState(false);            //this is the dialog state\r\n  const [currentDialog, setCurrentDialog] = React.useState('');         //this is the dialog parameter (that specifies which button is pressed)\r\n\r\n  const [usersInCity, setUsersInCity] = React.useState({});             //this gets and updates all the users in the city\r\n  const [hacked, setHacked] = React.useState(false);                    //this notifies if the user hacked the city\r\n  const [aHackToStopHack, setAHackToStopHack] = React.useState(false);  //this stops the update function from continually calling the hack function\r\n  \r\n  const [notifier, incrementNotifier] = React.useState(0);              //if I need to ping useEffect ever\r\n\r\n\r\n  const updateUsersInCity = async () => {\r\n    if (!usersInCity) {\r\n      let usersToBeInTheCity = await(GetAllUsersInCity(props.location.id));\r\n      setUsersInCity(usersToBeInTheCity);\r\n    }\r\n  }\r\n\r\n\r\n  const swapCurrentView = () => {\r\n    if (currentView === 'main') {\r\n      setCurrentView('userView');\r\n    }\r\n    else {\r\n      setCurrentView('main');\r\n    }\r\n  }\r\n\r\n\r\n  // returns the new location information from the server when a user makes a valid change to their location\r\n  const changeLocation = async (nextId) => {\r\n    if (nextId === props.location.adjacent[0].id || \r\n        nextId === props.location.adjacent[1].id) {\r\n          let nextLocation = await(GetNextLocation(nextId));\r\n          props.setLocation(nextLocation);\r\n        }\r\n\r\n    // TODO: I also need to update the users current location, but I don't know how to do that with Heng's redux (ASK HIM TO DO IT)\r\n  }\r\n\r\n\r\n  const changeHackStatus = () => {\r\n    if (!hacked) {\r\n      setHacked(true);\r\n    }\r\n  };\r\n\r\n\r\n  //updates the DOM\r\n  useEffect(() => {\r\n    console.log(\"in useEffect hook\");\r\n\r\n    if (hacked && aHackToStopHack === false) {\r\n      //TODO: \r\n      //  - right now this shows nothing, just calls the request\r\n      //  - contract success or failure should show\r\n      //  - need to have the contracts tied to the user first \r\n      const updateWithHack = async () => {\r\n        await(HandleHackRequest());\r\n      }\r\n      updateWithHack();\r\n      setAHackToStopHack(true);\r\n    }\r\n\r\n  }, [props.location, currentView, hacked, aHackToStopHack]);\r\n\r\n\r\n\r\n  //various dialog openers\r\n  const handleHackDialogOpen = () => {\r\n    setDialogOpen(true);\r\n    setCurrentDialog('hack');\r\n  };\r\n  const handleMove1DialogOpen = () => {\r\n    setDialogOpen(true);\r\n    setCurrentDialog('move1');\r\n  };\r\n  const handleMove2DialogOpen = () => {\r\n    setDialogOpen(true);\r\n    setCurrentDialog('move2');\r\n  };\r\n\r\n\r\n  //closes the dialog\r\n  const handleDialogClose = () => {\r\n    setDialogOpen(false);\r\n    setCurrentDialog('');\r\n  };\r\n\r\n\r\n  //handles the confirmed actions from the dialogs\r\n  const handleDialogYes = () => {\r\n    switch (currentDialog) {\r\n      case 'hack':\r\n        changeHackStatus(true);\r\n        break;\r\n      case 'move1':\r\n        changeLocation(props.location.adjacent[0].id);\r\n        break;\r\n      case 'move2':\r\n        changeLocation(props.location.adjacent[1].id);\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n\r\n    handleDialogClose();\r\n    setCurrentDialog('');\r\n  };\r\n\r\n\r\n  //opens and closes the drawer\r\n  const toggleDrawer = (anchor, open) => (event) => {\r\n    if (event.type === 'keydown' && (event.key === 'Tab' || event.key === 'Shift')) {\r\n      return;\r\n    }\r\n    setState({ ...state, [anchor]: open });\r\n  };\r\n\r\n\r\n  //TODO\r\n  //display table\r\n  const showUsersInCity = () => {\r\n    updateUsersInCity();\r\n    return (\r\n      <div>\r\n        <Button className={classes.backButton} variant='outlined' onClick={swapCurrentView}>Back</Button>\r\n        <UsersInCityTable />\r\n      </div>\r\n    )\r\n  }\r\n\r\n\r\n  //displays the actions (list of buttons) part of the drawer\r\n  const locationActions = () => {\r\n    return (\r\n    <div className={clsx(classes.list)} role=\"presentation\">\r\n      <h3 style={{marginLeft:'20px'}}>Actions</h3>\r\n      {props.location.id !== user.currentLocation ? \r\n      (\r\n        <List>\r\n            <ListItem button key='Hack' disabled={hacked} onClick={handleHackDialogOpen}>\r\n                <ListItemIcon> <CameraIcon /></ListItemIcon>\r\n                <ListItemText primary='Hack' />\r\n            </ListItem>\r\n            <ListItem button onClick={swapCurrentView} key='View Users in City'>\r\n                <ListItemIcon><PeopleIcon /></ListItemIcon>\r\n                <ListItemText primary='View Users in City' />\r\n            </ListItem>\r\n            <ListItem button onClick={handleMove1DialogOpen} key={'Travel to ' + props.location.adjacent[0].name}>\r\n                <ListItemIcon><FlightTakeoffIcon /></ListItemIcon>\r\n                <ListItemText primary={'Travel to ' + props.location.adjacent[0].name} />\r\n            </ListItem>\r\n            <ListItem button onClick={handleMove2DialogOpen} key={'Travel to ' + props.location.adjacent[1].name}>\r\n                <ListItemIcon><FlightTakeoffIcon /></ListItemIcon>\r\n                <ListItemText primary={'Travel to ' + props.location.adjacent[1].name} />\r\n            </ListItem>\r\n        </List>\r\n      ) : (\r\n        <div>\r\n          <p>You are not in this location.</p>\r\n          <p>You can only act in your current city.</p>\r\n        </div>\r\n      )}\r\n    </div>\r\n  )};\r\n\r\n\r\n  // displays the dialog\r\n  const DialogPopup = () => {\r\n    let title = '';\r\n    let description = '';\r\n    if (currentDialog === 'hack') {\r\n      title = `Are you sure you want to hack ${props.location.locationName}?`\r\n      description = `This will reveal all active aliases in this location.\r\n      If you do not reveal your target with this hack, your contract will fail, and your company reputation will go down.`\r\n    }\r\n    else if (currentDialog === 'move1') {\r\n      title = `Are you sure you want to travel to ${props.location.adjacent[0].name}?`\r\n      description = `Your movement will be put on cooldown.`\r\n    }\r\n    else if (currentDialog === 'move2') {\r\n      title = `Are you sure you want to travel to ${props.location.adjacent[1].name}?`\r\n      description = `Your movement will be put on cooldown.`\r\n    }\r\n\r\n    return (\r\n      <Dialog\r\n        open={openDialog}\r\n        onClose={handleDialogClose}\r\n        aria-labelledby=\"alert-dialog-title\"\r\n        aria-describedby=\"alert-dialog-description\"\r\n      >\r\n        <DialogTitle id=\"alert-dialog-title\">{title}</DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText id=\"alert-dialog-description\">{description}</DialogContentText>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleDialogClose} color=\"primary\">\r\n            No\r\n          </Button>\r\n          <Button onClick={handleDialogYes} color=\"primary\" autoFocus>\r\n            Yes\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    )\r\n  }\r\n\r\n\r\n  const UsersInCityTable = () => {\r\n    let rows = [];\r\n\r\n    //TEST ROW\r\n    rows.push(createData('Jane Doe', ['Mrs. Smith', 'Ruby Tuesdays', 'Death Adder'].toString()))\r\n    \r\n    for (user in usersInCity) {\r\n      rows.push(createData(user.name, user.knownAliases));\r\n    }\r\n\r\n    return (\r\n        <TableContainer component={Paper} style={{maxWidth:'90%', marginLeft:'auto', marginRight:'auto'}}>\r\n          <Table className={classes.table} aria-label=\"customized table\">\r\n            <TableHead>\r\n              <TableRow>\r\n                <StyledTableCell>Name</StyledTableCell>\r\n                <StyledTableCell align=\"left\">Known Aliases</StyledTableCell>\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n              {rows.map((row) => (\r\n                <StyledTableRow key={row.name}>\r\n                  <StyledTableCell component=\"th\" scope=\"row\">\r\n                    {row.name}\r\n                  </StyledTableCell>\r\n                  <StyledTableCell align=\"left\">{row.knownAliases}</StyledTableCell>\r\n                </StyledTableRow>\r\n              ))}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n      );\r\n  }\r\n\r\n  \r\n  return (\r\n    <div>\r\n        <React.Fragment>\r\n          <Button onClick={toggleDrawer('left', true)}>{props.location.locationName}</Button>\r\n          <Drawer anchor={'left'} open={state['left']} onClose={toggleDrawer('left', false)}>\r\n            <h1 style={{marginLeft:'auto', marginRight:'auto'}}>{props.location.locationName}</h1>\r\n            <img src={props.location.image} alt={props.location.locationName} style={{borderRadius: '5%', maxWidth: '50%', maxHeight: '50%', marginLeft: 'auto', marginRight:'auto'}} />\r\n            <p style={{marginLeft:'10%', marginTop:'5%', marginBottom:'5%'}}>{props.location.description}</p>\r\n            <Divider style={{marginLeft: '5%', marginRight: '5%'}} />\r\n            {currentView === 'main' ? locationActions() : showUsersInCity()}\r\n          </Drawer>\r\n          <DialogPopup />\r\n        </React.Fragment>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LocationDrawer;","C:\\Users\\User\\Jobs\\Revature\\Training\\Projects\\project-2\\project-2-team5-frontend\\src\\components\\require_auth.js",[],"C:\\Users\\User\\Jobs\\Revature\\Training\\Projects\\project-2\\project-2-team5-frontend\\src\\components\\Dash.js",["80","81","82"],"C:\\Users\\User\\Jobs\\Revature\\Training\\Projects\\project-2\\project-2-team5-frontend\\src\\components\\Header.js",[],"C:\\Users\\User\\Jobs\\Revature\\Training\\Projects\\project-2\\project-2-team5-frontend\\src\\components\\Map\\Map.js",[],"C:\\Users\\User\\Jobs\\Revature\\Training\\Projects\\project-2\\project-2-team5-frontend\\src\\utils\\uri-fuctions.js",[],"C:\\Users\\User\\Jobs\\Revature\\Training\\Projects\\project-2\\project-2-team5-frontend\\src\\actions\\types.js",[],"C:\\Users\\User\\Jobs\\Revature\\Training\\Projects\\project-2\\project-2-team5-frontend\\src\\actions\\index.js",[],"C:\\Users\\User\\Jobs\\Revature\\Training\\Projects\\project-2\\project-2-team5-frontend\\src\\actions\\login.js",[],"C:\\Users\\User\\Jobs\\Revature\\Training\\Projects\\project-2\\project-2-team5-frontend\\src\\utils\\remote.js",[],{"ruleId":"83","severity":1,"message":"84","line":4,"column":10,"nodeType":"85","messageId":"86","endLine":4,"endColumn":23},{"ruleId":"83","severity":1,"message":"87","line":5,"column":10,"nodeType":"85","messageId":"86","endLine":5,"endColumn":24},{"ruleId":"83","severity":1,"message":"88","line":6,"column":10,"nodeType":"85","messageId":"86","endLine":6,"endColumn":16},{"ruleId":"89","replacedBy":"90"},{"ruleId":"91","replacedBy":"92"},{"ruleId":"83","severity":1,"message":"93","line":91,"column":10,"nodeType":"85","messageId":"86","endLine":91,"endColumn":18},{"ruleId":"83","severity":1,"message":"94","line":91,"column":20,"nodeType":"85","messageId":"86","endLine":91,"endColumn":37},{"ruleId":"95","severity":1,"message":"96","line":300,"column":10,"nodeType":"85","messageId":"97","endLine":300,"endColumn":14},{"ruleId":"83","severity":1,"message":"98","line":1,"column":17,"nodeType":"85","messageId":"86","endLine":1,"endColumn":25},{"ruleId":"83","severity":1,"message":"99","line":2,"column":10,"nodeType":"85","messageId":"86","endLine":2,"endColumn":17},{"ruleId":"83","severity":1,"message":"100","line":7,"column":9,"nodeType":"85","messageId":"86","endLine":7,"endColumn":13},"no-unused-vars","'ThemeProvider' is defined but never used.","Identifier","unusedVar","'createMuiTheme' is defined but never used.","'purple' is defined but never used.","no-native-reassign",["101"],"no-negated-in-lhs",["102"],"'notifier' is assigned a value but never used.","'incrementNotifier' is assigned a value but never used.","no-const-assign","'user' is constant.","const","'useState' is defined but never used.","'connect' is defined but never used.","'user' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]